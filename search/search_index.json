{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>pDataService - Advenced Data Managment for Roblox Games.</p> <p>pDataService is a powerful data management module for Roblox that provides reliable data handling, automatic saving, backup functionality, and easy customization. It is designed to simplify data storage, versioning, and backup for player profiles and global data.</p> <p>Roblox Marketplace Download</p> <ul> <li>Support Development</li> </ul> <p>Donate in Roblox game</p> <p>PayPal</p>"},{"location":"#full-feature-list","title":"Full Feature List","text":""},{"location":"#full-feature-list-of-pdataservice","title":"Full Feature List of pDataService","text":"<ol> <li>Data Store Configuration:</li> <li>Customizable DataStore key (<code>DataStoreKey</code>).</li> <li>Versioning support (<code>DataVersion</code>).</li> <li>Configurable intervals for auto-saving and profile backups.</li> <li>Auto-Save Functionality:</li> <li>Automatically saves player profiles at regular intervals.</li> <li>Profile Management:</li> <li>Active management of player profiles, including loading and saving.</li> <li>Supports default data values for new profiles.</li> <li>Profile Backup and Restore:</li> <li>Automatic backups of player profiles.</li> <li>Ability to restore profiles from backups using a designated backup key suffix.</li> <li>Data Compression:</li> <li>Option to enable or disable data compression for storage efficiency.</li> <li>Rate Limiting:</li> <li>Implements rate limiting on save requests to prevent spamming.</li> <li>Profile Locking Mechanism:</li> <li>Locks profiles during modifications to prevent concurrent changes.</li> <li>Event Hooks:</li> <li>Custom event hooks for various profile actions (load, save, delete).</li> <li>Allows for custom callbacks on these events.</li> <li>Data Validation:</li> <li>Ensures that all player data meets required specifications before saving or loading.</li> <li>Checks for required fields and their data types.</li> <li>Logging System:</li> <li>Comprehensive logging with different levels (INFO, ERROR, WARNING).</li> <li>Tracks important events and errors for debugging.</li> <li>Async Data Operations:</li> <li>Non-blocking data saving with coroutines, enhancing performance during player interactions.</li> <li>Retry Mechanism:</li> <li>Retries failed save and load operations up to a specified maximum number of attempts.</li> <li>Global Data Handling:</li> <li>Ability to save and load global data separate from player profiles.</li> <li>Profile Expiration:</li> <li>Supports profile expiration with configurable expiration times.</li> <li>Statistics Tracking:</li> <li>Maintains statistics for each player\u2019s profile save operations.</li> <li>Snapshot Management:</li> <li>Ability to manage snapshots of player profiles for historical tracking.</li> <li>Profile Clearing:</li> <li>Functionality to clear all active profiles from memory.</li> <li>Customizable Error Handling:</li> <li>Defined error messages for different failure scenarios during data operations.</li> <li>Initialization Method:</li> <li>Initializes the service and starts the auto-save coroutine upon setup.</li> <li>Profile Data Updates:</li> <li>Allows for updating existing player profile data efficiently.</li> <li>Last Save Time Tracking:</li> <li>Tracks the last time a profile was saved for each player.</li> </ol>"},{"location":"#configuration-tips","title":"Configuration Tips","text":"<p>Note</p> <p>Make sure that you configurate the WHOLE config file because everything is managed from there.</p> <p>Quick glance at Config module script:</p> <pre><code>local Config = {}\n\n-- Data store settings\nConfig.DataStoreKey = \"CHANGE_ME\" \nassert(Config.DataStoreKey ~= \"CHANGE_ME\", \"DataStoreKey must be set!\")\n\nConfig.DataVersion = \"1.0.1\"\n\n-- Auto-saving settings\nConfig.AutoSaveInterval = 60 -- Time in seconds between automatic saves\nConfig.ProfileBackupInterval = 300 -- Time in seconds between backups\n\n-- Request settings\nConfig.RequestRateLimit = 5 -- Minimum time in seconds between requests for the same player\n\n-- Encryption settings\nConfig.EnableEncryption = true -- Enable or disable encryption\nConfig.EncryptionKey = 123 -- Key used for encryption/decryption (should be a number)\nassert(type(Config.EncryptionKey) == \"number\", \"EncryptionKey must be a number!\")\n\n-- Logging settings\nConfig.EnableLogging = true -- Enable or disable logging\nConfig.LogLevel = \"INFO\" -- Log level: INFO, WARNING, ERROR\n\n-- Profile management settings\nConfig.MaxInactiveDuration = 3600 -- Maximum duration in seconds to keep inactive profiles in memory\nConfig.CleanupInterval = 600 -- Time in seconds between profile cleanup checks\nConfig.MaxBackupsPerPlayer = 5 -- Maximum number of backups to keep per player\n\nConfig.MaxRetries = 3 -- Maximum number of retries for saving/loading profiles\nConfig.UseBackup = true -- Whether to use backups for profiles\nConfig.BackupKeySuffix = \"_backup\" -- Suffix for backup keys\nConfig.CompressionEnabled = true -- Enable or disable data compression\nConfig.ProfileExpirationTime = 3600 -- Duration in seconds before profiles expire\n\nreturn Config\n</code></pre>"},{"location":"api/","title":"API","text":"<p>Warning</p> <p>Regularly back up player data to prevent data loss.</p> <p>Note</p> <p>Ensure proper error handling to manage potential failures during data operations.</p>"},{"location":"api/#1-pdataservicelogmessage-level","title":"1. <code>pDataService:Log(message, level)</code>","text":"<p>Logs messages with a timestamp and specified log level.</p> <ul> <li>Parameters:</li> <li><code>message</code> (string) - The message to log.</li> <li><code>level</code> (string) - The log level (default: \"INFO\").</li> <li>Returns: None.</li> </ul> <p>Example:</p> <pre><code>pDataService:Log(\"Player has logged in.\", \"INFO\")\n</code></pre>"},{"location":"api/#2-pdataservicegeneratekeyplayerid","title":"2. <code>pDataService:GenerateKey(playerId)</code>","text":"<p>Generates a unique data store key for a given player ID.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: (string) - The generated key for the player.</li> </ul> <p>Example:</p> <pre><code>local playerKey = pDataService:GenerateKey(player.UserId)\nprint(\"Generated key: \" .. playerKey)\n</code></pre>"},{"location":"api/#3-pdataservicegetdatastore","title":"3. <code>pDataService:GetDataStore()</code>","text":"<p>Retrieves the data store instance based on the configured key.</p> <ul> <li>Parameters: None.</li> <li>Returns: (DataStore) - The data store instance.</li> </ul> <p>Example:</p> <pre><code>local dataStore = pDataService:GetDataStore()\n</code></pre>"},{"location":"api/#4-pdataservicecompressdatadata","title":"4. <code>pDataService:CompressData(data)</code>","text":"<p>Compresses data using JSON encoding if compression is enabled.</p> <ul> <li>Parameters:</li> <li><code>data</code> (table) - The data to compress.</li> <li>Returns: (string) - The compressed data as a JSON string.</li> </ul> <p>Example:</p> <pre><code>local compressedData = pDataService:CompressData(playerData)\n</code></pre>"},{"location":"api/#5-pdataservicedecompressdatadata","title":"5. <code>pDataService:DecompressData(data)</code>","text":"<p>Decompresses data using JSON decoding if compression is enabled.</p> <ul> <li>Parameters:</li> <li><code>data</code> (string) - The compressed data.</li> <li>Returns: (table) - The decompressed data.</li> </ul> <p>Example:</p> <pre><code>local decompressedData = pDataService:DecompressData(compressedData)\n</code></pre>"},{"location":"api/#6-pdataserviceratelimitplayerid","title":"6. <code>pDataService:RateLimit(playerId)</code>","text":"<p>Checks and manages the rate limit for saving profiles based on the last save time.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: (boolean) - <code>true</code> if the player can save, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:RateLimit(player.UserId) then\n    print(\"You can save your profile.\")\nend\n</code></pre>"},{"location":"api/#7-pdataservicevalidatedatadata","title":"7. <code>pDataService:ValidateData(data)</code>","text":"<p>Validates data to ensure it meets the required structure and types.</p> <ul> <li>Parameters:</li> <li><code>data</code> (table) - The data to validate.</li> <li>Returns: (boolean) - <code>true</code> if valid, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:ValidateData(playerData) then\n    print(\"Data is valid.\")\nelse\n    print(\"Data is invalid.\")\nend\n</code></pre>"},{"location":"api/#8-pdataserviceloadprofileplayerid-defaultdata","title":"8. <code>pDataService:LoadProfile(playerId, defaultData)</code>","text":"<p>Loads the player profile for the given player ID.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li><code>defaultData</code> (table) - The default data to return if loading fails.</li> <li>Returns: (table) - The loaded profile data.</li> </ul> <p>Example:</p> <pre><code>local profileData = pDataService:LoadProfile(player.UserId, defaultProfile)\n</code></pre>"},{"location":"api/#9-pdataservicesaveprofileplayerid","title":"9. <code>pDataService:SaveProfile(playerId)</code>","text":"<p>Saves the active profile data for the given player ID to the data store.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: (boolean) - <code>true</code> if saved successfully, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:SaveProfile(player.UserId) then\n    print(\"Profile saved successfully.\")\nend\n</code></pre>"},{"location":"api/#10-pdataservicereleaseprofileplayerid","title":"10. <code>pDataService:ReleaseProfile(playerId)</code>","text":"<p>Releases the profile data for the given player ID.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: None.</li> </ul> <p>Example:</p> <pre><code>pDataService:ReleaseProfile(player.UserId)\n</code></pre>"},{"location":"api/#11-pdataserviceautosaveprofiles","title":"11. <code>pDataService:AutoSaveProfiles()</code>","text":"<p>Automatically saves profiles at specified intervals.</p> <ul> <li>Parameters: None.</li> <li>Returns: None.</li> </ul> <p>Example:</p> <pre><code>pDataService:AutoSaveProfiles()\n</code></pre>"},{"location":"api/#12-pdataservicebackupprofileplayerid","title":"12. <code>pDataService:BackupProfile(playerId)</code>","text":"<p>Creates a backup of the active profile data for the given player ID.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: (boolean) - <code>true</code> if backup created successfully, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:BackupProfile(player.UserId) then\n    print(\"Profile backup created.\")\nend\n</code></pre>"},{"location":"api/#13-pdataservicerestorebackupplayerid","title":"13. <code>pDataService:RestoreBackup(playerId)</code>","text":"<p>Restores the profile data from a backup for the given player ID.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: (boolean) - <code>true</code> if restored successfully, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:RestoreBackup(player.UserId) then\n    print(\"Profile restored from backup.\")\nend\n</code></pre>"},{"location":"api/#14-pdataservicesaveglobaldatakey-data","title":"14. <code>pDataService:SaveGlobalData(key, data)</code>","text":"<p>Saves global data under a specified key to the data store.</p> <ul> <li>Parameters:</li> <li><code>key</code> (string) - The key under which to save the data.</li> <li><code>data</code> (table) - The data to save.</li> <li>Returns: (boolean) - <code>true</code> if saved successfully, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:SaveGlobalData(\"serverSettings\", settingsData) then\n    print(\"Global data saved.\")\nend\n</code></pre>"},{"location":"api/#15-pdataserviceloadglobaldatakey-defaultdata","title":"15. <code>pDataService:LoadGlobalData(key, defaultData)</code>","text":"<p>Loads global data from the data store under the specified key.</p> <ul> <li>Parameters:</li> <li><code>key</code> (string) - The key to load data from.</li> <li><code>defaultData</code> (table) - The default data to return if loading fails.</li> <li>Returns: (table) - The loaded global data.</li> </ul> <p>Example:</p> <pre><code>local globalData = pDataService:LoadGlobalData(\"serverSettings\", defaultSettings)\n</code></pre>"},{"location":"api/#16-pdataservicelockprofileplayerid","title":"16. <code>pDataService:LockProfile(playerId)</code>","text":"<p>Locks the profile for the given player ID to prevent concurrent modifications.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: None.</li> </ul> <p>Example:</p> <pre><code>pDataService:LockProfile(player.UserId)\n</code></pre>"},{"location":"api/#17-pdataserviceunlockprofileplayerid","title":"17. <code>pDataService:UnlockProfile(playerId)</code>","text":"<p>Unlocks the profile for the given player ID to allow modifications.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: None.</li> </ul> <p>Example:</p> <pre><code>pDataService:UnlockProfile(player.UserId)\n</code></pre>"},{"location":"api/#18-pdataserviceisprofilelockedplayerid","title":"18. <code>pDataService:IsProfileLocked(playerId)</code>","text":"<p>Checks if a player\u2019s profile is locked.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: (boolean) - <code>true</code> if locked, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:IsProfileLocked(player.UserId) then\n    print(\"Profile is locked.\")\nend\n</code></pre>"},{"location":"api/#19-pdataservicegetlastsavetimeplayerid","title":"19. <code>pDataService:GetLastSaveTime(playerId)</code>","text":"<p>Retrieves the last save time for the given player's profile.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li>Returns: (DateTime) - The last save time.</li> </ul> <p>Example:</p> <pre><code>local lastSaveTime = pDataService:GetLastSaveTime(player.UserId)\nprint(\"Last save time: \" .. lastSaveTime)\n</code></pre>"},{"location":"api/#20-pdataserviceupdateprofileplayerid-updates","title":"20. <code>pDataService:UpdateProfile(playerId, updates)</code>","text":"<p>Updates the active profile with new data for the given player ID.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li><code>updates</code> (table) - The data to update in the profile.</li> <li>Returns: (boolean) - <code>true</code> if updated successfully, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:UpdateProfile(player.UserId, {level = 5}) then\n    print(\"Profile updated.\")\nend\n</code></pre>"},{"location":"api/#21-pdataserviceasyncsavedataplayerid-data","title":"21. <code>pDataService:AsyncSaveData(playerId, data)</code>","text":"<p>Asynchronously saves data for the given player ID after validating it.</p> <ul> <li>Parameters:</li> <li><code>playerId</code> (number) - Unique ID of the player.</li> <li><code>data</code> (table) - The data to save.</li> <li>Returns: (boolean) - <code>true</code> if saved successfully, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>if pDataService:AsyncSaveData(player.UserId, playerData) then\n    print(\"Async save successful.\")\nend\n</code></pre>"},{"location":"dev_logs/","title":"Development","text":""},{"location":"dev_logs/#changelog-for-pdataservice","title":"Changelog for pDataService","text":"<p>Note</p> <p>This is the latest update.</p>"},{"location":"dev_logs/#version-101","title":"Version 1.0.1","text":"<ul> <li>Initial Release: Launched the pDataService to manage player data profiles with various features.</li> </ul>"},{"location":"dev_logs/#features-added","title":"Features Added","text":"<ul> <li>Data Store Integration: Implemented integration with Roblox DataStoreService for saving and loading player profiles.</li> <li>Configurable Parameters: Introduced a configuration module allowing customization of key parameters such as <code>DataStoreKey</code>, <code>AutoSaveInterval</code>, <code>ProfileBackupInterval</code>, and others.</li> <li>Profile Management: Enabled loading and saving of player profiles, with data validation to ensure integrity.</li> <li>Auto-Save Functionality: Added automatic saving of profiles at user-defined intervals.</li> <li>Profile Backup: Implemented a backup feature to create backups of player profiles, with the ability to restore from backup if needed.</li> <li>Data Compression: Introduced data compression for storage optimization.</li> <li>Rate Limiting: Added rate limiting to manage save requests and prevent server overload.</li> <li>Profile Locking: Implemented profile locking to prevent concurrent modifications during data operations.</li> <li>Event Hooks: Introduced event hooks for <code>OnProfileLoad</code>, <code>OnProfileSave</code>, and <code>OnProfileDelete</code> to allow custom actions on these events.</li> <li>Logging System: Implemented a logging system for tracking data operations and errors with various log levels.</li> </ul>"},{"location":"dev_logs/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Error Handling: Improved error handling during data loading and saving to provide clearer error messages.</li> <li>Validation Checks: Enhanced validation checks for data consistency and integrity before processing.</li> </ul>"},{"location":"dev_logs/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Async Data Operations: Converted data save operations to use coroutines for non-blocking execution.</li> <li>Retry Mechanism: Added a retry mechanism for data save and load operations to enhance reliability.</li> </ul>"},{"location":"Getting%20Started/basic_usage/","title":"Basic Usage","text":"<p>Note</p> <p>If auto-saving is enabled in pDataService, manual saves on PlayerRemoving are not strictly necessary but recommended for data integrity. To ensure reliability, consider adding error handling for network or server issues, especially if saving to an external database. Additionally, define all required data fields in <code>SetDefaultProfile()</code> to prevent missing data errors during gameplay.</p> <p>Heres a simple implementation example: SimpleDataManager.rbxm</p> <p>And also heres code example:</p> <pre><code>-- Require the pDataService module\nlocal pDataService = require(game.ServerScriptService.pDataService)\n\n-- Define default player data to ensure all profiles have these initial values\npDataService:SetDefaultProfile({\n    Coins = 0,\n    Level = 1,\n    Inventory = {}\n})\n\n-- Load player profile when they join\ngame.Players.PlayerAdded:Connect(function(player)\n    local success, profile = pDataService:LoadProfile(player.UserId)\n\n    if success then\n        print(\"Profile loaded successfully for\", player.Name)\n\n        -- Example of modifying data: Adding 10 coins to the player\u2019s profile\n        profile.Data.Coins = (profile.Data.Coins or 0) + 10\n    else\n        warn(\"Failed to load profile for\", player.Name)\n    end\nend)\n\n-- Save player profile when they leave\ngame.Players.PlayerRemoving:Connect(function(player)\n    pDataService:SaveProfile(player.UserId)\nend)\n</code></pre>"},{"location":"Getting%20Started/installation/","title":"Installation","text":"<ul> <li>Get the model from marketplace:</li> </ul> <p>Roblox Marketplace Download</p> <ol> <li>Ungroup everything from folder, <code>Instructions</code> script is where everything is explained where to put.</li> <li>Open the <code>Config</code> module script located inside the pDataService and edit it make sure to configure everything to your needs.</li> <li> <p>And thats it.</p> </li> <li> <p>If you experience any problems feel free to report them at the dev forum!</p> </li> </ol>"}]}